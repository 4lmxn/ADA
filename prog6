#include <stdio.h>

int value[10][10];

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knapsack(int n, int m, int cost[], int weight[]) {
    int i, j;
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= m; j++) {
            if (j < weight[i])
                value[i][j] = value[i - 1][j];
            else
                value[i][j] = max(value[i - 1][j], cost[i] + value[i - 1][j - weight[i]]);
        }
    }
    return value[n][m];
}

void findSolution(int n, int m, int weight[]) {
    int i = n, j = m;
    int x[10] = {0};

    while (i != 0 && j != 0) {
        if (value[i][j] != value[i - 1][j]) {
            x[i] = 1;
            j -= weight[i];
        }
        i--;
    }

    printf("Selected items:\n");
    for (i = 1; i <= n; i++)
        if (x[i]) printf("Item %d\n", i);
}

int main() {
    int i, j, n, m, cost[10], weight[10], optimalVal;

    printf("Enter number of items: ");
    scanf("%d", &n);

    printf("Enter weights of items: ");
    for (i = 1; i <= n; i++) scanf("%d", &weight[i]);

    printf("Enter profits of items: ");
    for (i = 1; i <= n; i++) scanf("%d", &cost[i]);

    printf("Enter knapsack capacity: ");
    scanf("%d", &m);

    optimalVal = knapsack(n, m, cost, weight);

    printf("Knapsack Matrix:\n");
    for (i = 0; i <= n; i++) {
        for (j = 0; j <= m; j++)
            printf("%d\t", value[i][j]);
        printf("\n");
    }

    printf("Optimal solution value: %d\n", optimalVal);
    findSolution(n, m, weight);

    return 0;
}
