/* plot "quick.data" u 1:2 w lp title "Quick Sort" */
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int partition(int a[], int low, int high) {
    int p = a[low];
    int i = low;
    int j = high;
    int temp;

    while (i < j) {
        while (a[i] <= p && i <= high - 1) {
            i++;
        }
        while (a[j] > p && j >= low + 1) {
            j--;
        }
        if (i < j) {
            temp = a[i];
            a[i] = a[j];
            a[j] = temp;
        }
    }

    temp = a[low];
    a[low] = a[j];
    a[j] = temp;

    return j;
}

void quickSort(int a[], int low, int high) {
    if (low < high) {
        int pi = partition(a, low, high);
        quickSort(a, low, pi - 1);
        quickSort(a, pi + 1, high);
    }
}

int main() {
    int a[100000], b[100000];
    int i;
    clock_t start, end;
    double quick_time[50], q_time;
    int number[50];
    int tot = 30;
    int n = 1000;

    srand(20);

    for (int count = 0; count <= tot; count++) {
        for (i = 0; i < n; i++) {
            a[i] = rand() % 10000;
            b[i] = a[i]; // though b[] is unused
        }

        number[count] = n;

        start = clock();
        quickSort(a, 0, n - 1);
        end = clock();

        q_time = (double)(end - start) / CLOCKS_PER_SEC;
        quick_time[count] = q_time;

        printf("%d\t%d\t%f\n", count + 1, number[count], quick_time[count]);

        n += 1000;
    }

    printf("-----------------------------------------------------\n");
    printf("Input Size\tQuick Sort Time (s)\n");
    for (int i = 0; i <= tot; i++) {
        printf("%d\t%f\n", number[i], quick_time[i]);
    }

    return 0;
}
